// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  customer
  helper
  admin
}

enum Gender {
  male
  female
  other
}

enum UserStatus {
  active
  in_active
  blocked
}

enum BookingStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
}

enum PaymentStatus {
  pending
  paid
  refunded
}

enum RoomType {
  bedroom
  bathroom
  kitchen
  living_room
  other
}

enum ComplaintStatus {
  pending
  investigating
  resolved
  dismissed
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  userType         UserType         @map("user_type")
  gender           Gender?
  profilePicture   String?          @map("profile_picture")
  fullName         String           @map("full_name") @db.VarChar(150)
  dateOfBirth      DateTime         @map("date_of_birth") @db.Date
  identifyCard     String?          @map("identify_card") @db.Text
  address          String?          @db.Text
  phoneNumber      String           @map("phone_number") @db.VarChar(20)
  email            String           @unique @db.VarChar(255)
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  status           UserStatus       @default(active)
  helper           Helper?
  customerBookings Booking[]        @relation("CustomerBookings")
  reportedBy       Complaint[]      @relation("ReportedByUser")
  reportedUser     Complaint[]      @relation("ReportedUser")
  blacklistedUser  BlacklistedUser? @relation("BlacklistedUser")
  blacklistedBy    BlacklistedUser[] @relation("BlacklistedByAdmin")

  @@map("users")
}

model Helper {
  id                   String    @id @default(uuid()) @db.Uuid
  user                 User      @relation(fields: [id], references: [id])
  experienceDescription String?  @map("experience_description") @db.Text
  resumeUploaded       String?   @map("resume_uploaded") @db.Text
  servicesOffered      String[]  @map("services_offered") @db.Uuid
  hourlyRate           Decimal   @map("hourly_rate") @db.Decimal(10, 2)
  averageRating        Decimal?  @map("average_rating") @default(0) @db.Decimal(2, 1)
  completedJobs        Int       @default(0) @map("completed_jobs")
  cancelledJobs        Int       @default(0) @map("cancelled_jobs")
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  bookings             Booking[] @relation("HelperBookings")

  @@map("helpers")
}

model ServiceCategory {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @unique @db.VarChar(50)
  description String?       @db.Text
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp()
  isActive    Boolean      @default(true) @map("is_active")
  serviceTypes ServiceType[]

  @@map("service_categories")
}

model ServiceType {
  id          String          @id @default(uuid()) @db.Uuid
  categoryId  String          @map("category_id") @db.Uuid
  name        String          @db.VarChar(100)
  description String?         @db.Text
  basePrice   Decimal         @map("base_price")
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamp()
  isActive    Boolean        @default(true) @map("is_active")
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  roomPricing RoomPricing[]
  duration    DurationPrice[]
  bookings    Booking[]

  @@unique([categoryId, name])
  @@map("service_types")
}

model RoomPricing {
  id             String      @id @default(uuid()) @db.Uuid
  serviceTypeId  String      @map("service_type_id") @db.Uuid
  roomType       RoomType    @map("room_type")
  roomCount      Int?        @map("room_count")
  additionalPrice Decimal    @default(0) @map("additional_price") @db.Decimal(10, 2)
  createdAt      DateTime   @default(now()) @map("created_at") @db.Timestamp()
  serviceType    ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@unique([serviceTypeId, roomType, roomCount])
  @@map("room_pricing")
}

model DurationPrice {
  id              String      @id @default(uuid()) @db.Uuid
  serviceTypeId   String      @map("service_type_id") @db.Uuid
  durationHours   Int         @map("duration_hours")
  priceMultiplier Decimal     @default(1.00) @map("price_multiplier") @db.Decimal(3, 2)
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamp()
  serviceType     ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@unique([serviceTypeId, durationHours])
  @@map("duration_price")
}

model Booking {
  id                 String        @id @default(uuid()) @db.Uuid
  customerId         String        @map("customer_id") @db.Uuid
  helperId          String?       @map("helper_id") @db.Uuid
  serviceTypeId     String        @map("service_type_id") @db.Uuid
  location          String        @db.Text
  scheduledStartTime DateTime     @map("scheduled_start_time") @db.Timestamp()
  scheduledEndTime  DateTime     @map("scheduled_end_time") @db.Timestamp()
  actualStartTime   DateTime?    @map("actual_start_time") @db.Timestamp()
  actualEndTime     DateTime?    @map("actual_end_time") @db.Timestamp()
  status            BookingStatus @default(pending)
  cancellationReason String?      @map("cancellation_reason") @db.Text
  totalPrice        Decimal      @map("total_price") @db.Decimal(10, 2)
  paymentStatus     PaymentStatus @default(pending) @map("payment_status")
  paymentMethod     String?      @map("payment_method") @db.VarChar(50)
  helperRating      Decimal?     @map("helper_rating") @db.Decimal(2, 1)
  customerFeedback  String?      @map("customer_feedback") @db.Text
  helperFeedback    String?      @map("helper_feedback") @db.Text
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  customer          User         @relation("CustomerBookings", fields: [customerId], references: [id])
  helper            Helper?      @relation("HelperBookings", fields: [helperId], references: [id])
  serviceType       ServiceType  @relation(fields: [serviceTypeId], references: [id])
  bookingDetails    BookingDetail?
  complaints        Complaint[]

  @@map("bookings")
}

model BookingDetail {
  id                 String   @id @default(uuid()) @db.Uuid
  bookingId          String   @unique @map("booking_id") @db.Uuid
  bedroomCount       Int      @default(0) @map("bedroom_count")
  bathroomCount      Int      @default(0) @map("bathroom_count")
  kitchenCount       Int      @default(0) @map("kitchen_count")
  livingRoomCount    Int      @default(0) @map("living_room_count")
  specialRequirements String? @map("special_requirements") @db.Text()
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp()
  booking            Booking  @relation(fields: [bookingId], references: [id])

  @@map("booking_details")
}

model Complaint {
  id             String         @id @default(uuid()) @db.Uuid
  bookingId      String         @map("booking_id") @db.Uuid
  reportedById   String         @map("reported_by_id") @db.Uuid
  reportedUserId String         @map("reported_user_id") @db.Uuid
  reason         String         @db.Text
  status         ComplaintStatus @default(pending)
  resolution     String?        @db.Text
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp()
  resolvedAt     DateTime?     @map("resolved_at") @db.Timestamp()
  booking        Booking       @relation(fields: [bookingId], references: [id])
  reportedBy     User          @relation("ReportedByUser", fields: [reportedById], references: [id])
  reportedUser   User          @relation("ReportedUser", fields: [reportedUserId], references: [id])

  @@map("complaints")
}

model BlacklistedUser {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @unique @map("user_id") @db.Uuid
  reason        String    @db.Text
  blacklistedAt DateTime  @default(now()) @map("blacklisted_at") @db.Timestamp()
  blacklistedBy String    @map("blacklisted_by") @db.Uuid
  isPermanent   Boolean   @default(false) @map("is_permanent")
  expiryDate    DateTime? @map("expiry_date") @db.Timestamp()
  user          User      @relation("BlacklistedUser", fields: [userId], references: [id])
  admin         User      @relation("BlacklistedByAdmin", fields: [blacklistedBy], references: [id])

  @@map("blacklisted_users")
}