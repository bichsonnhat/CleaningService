// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  customer
  helper
  admin
}

enum Gender {
  male
  female
  other
}

enum UserStatus {
  active
  in_active
  blocked
}

enum ServiceType {
  Home_Cleaning
  Other_Service
}

enum RoomType {
  bedroom
  bathroom
}

enum DurationType {
  ONE_TO_THREE_HOURS @map("1-3 hours")
  THREE_TO_FIVE_HOURS @map("3-5 hours")
  HALF_A_DAY @map("Half a day")
  A_DAY @map("A day")
}

enum BookingStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
}

model User {
  id              String         @id @map("user_id")
  userType        UserType      @map("user_type")
  gender          Gender
  profilePicture  String?       @map("profile_picture")
  fullName        String        @map("full_name")
  dateOfBirth     DateTime      @map("date_of_birth")
  identifyCard    String        @map("identify_card")
  address         String
  phoneNumber     String        @map("phone_number")
  email           String        @unique
  createdAt       DateTime      @map("created_at")
  status          UserStatus
  helper          Helper?
  customerBookings Booking[]     @relation("CustomerBookings")
  blackLists      BlackList[]
  complaints      ComplaintList[] @relation("UserComplaints")

  @@map("users")
}

model Helper {
  helperId              String    @id @map("helper_id")
  experienceDescription String    @map("experience_description") @db.Text
  servicesOffered       String    @map("services_offered")
  proposedPrice         Decimal   @map("proposed_price") @db.Decimal(10, 2)
  averageRating         Decimal   @map("average_rating") @db.Decimal(3, 2)
  completedJobs         Int       @map("completed_jobs")
  cancelledJobs         Int       @map("cancelled_jobs")
  user                  User      @relation(fields: [helperId], references: [id])
  helperBookings        Booking[] @relation("HelperBookings")
  complaints            ComplaintList[] @relation("HelperComplaints")

  @@map("helpers")
}

model HomeCleaningType {
  typeId          String    @id @map("type_id")
  name        String
  description String    @db.Text
  basePrice   Decimal   @map("base_price") @db.Decimal(10, 2)
  cleaningDetails HomeCleaningDetail[]

  @@map("home_cleaning_types")
}

model OtherServiceType {
  typeId          String    @id @map("type_id")
  name        String
  description String    @db.Text
  basePrice   Decimal   @map("base_price") @db.Decimal(10, 2)
  serviceDetails OtherServiceDetail[]

  @@map("other_service_types")
}

model RoomPrice {
  roomPriceId     String    @id @map("room_price_id")
  roomType        RoomType  @map("room_type")
  roomCount       Int       @map("room_count")
  additionalPrice Decimal   @map("additional_price") @db.Decimal(10, 2)

  @@unique([roomType, roomCount])
  @@map("room_price")
}

model DurationPrice {
  durationPriceId String       @id @map("duration_price_id")
  durationType    DurationType @map("duration_type")
  price           Decimal      @db.Decimal(10, 2)

  @@unique([durationType])
  @@map("duration_price")
}

model BookingDetail {
  bookingDetailId       String      @id @map("booking_detail_id")
  bookingId            String      @map("booking_id")
  serviceType          ServiceType @map("service_type")
  homeCleaningDetailId String?     @map("home_cleaning_detail_id")
  otherServiceDetailId String?     @map("other_service_detail_id")
  booking              Booking     @relation(fields: [bookingId], references: [bookingId])
  homeCleaningDetail   HomeCleaningDetail? @relation(fields: [homeCleaningDetailId], references: [homeCleaningDetailId])
  otherServiceDetail   OtherServiceDetail? @relation(fields: [otherServiceDetailId], references: [otherServiceDetailId])

  @@map("booking_detail")
}

model HomeCleaningDetail {
  homeCleaningDetailId String           @id @map("home_cleaning_detail_id")
  homeCleaningTypeId  String          @map("home_cleaning_types_id")
  numberOfBedrooms    Int             @map("number_of_bedrooms")
  numberOfBathrooms   Int             @map("number_of_bathrooms")
  homeCleaningType    HomeCleaningType @relation(fields: [homeCleaningTypeId], references: [typeId])
  bookingDetails      BookingDetail[]

  @@map("home_cleaning_detail")
}

model OtherServiceDetail {
  otherServiceDetailId String          @id @map("other_service_detail_id")
  otherServiceTypeId  String          @map("other_service_types_id")
  otherServiceType    String          @map("other_service_type")
  durationType        DurationType    @map("duration_type")
  serviceType         OtherServiceType @relation(fields: [otherServiceTypeId], references: [typeId])
  bookingDetails      BookingDetail[]

  @@map("other_service_detail")
}

model Booking {
  bookingId           String        @id @map("booking_id")
  customerId          String        @map("customer_id")
  helperId           String        @map("helper_id")
  location          String        @db.Text
  startTime         DateTime      @map("start_time")
  endTime           DateTime      @map("end_time")
  status            BookingStatus
  cancellationReason String?      @map("cancellation_reason") @db.Text
  price             Decimal       @db.Decimal(10, 2)
  paymentMethod     String        @map("payment_method")
  rating            Int?
  feedback          String?       @db.Text
  customer          User          @relation("CustomerBookings", fields: [customerId], references: [id])
  helper            Helper        @relation("HelperBookings", fields: [helperId], references: [helperId])
  contract          Contract?
  bookingDetails    BookingDetail[]
  complaints        ComplaintList[]

  @@map("bookings")
}

model Contract {
  contractId  String   @id @map("contract_id")
  bookingId   String   @map("booking_id")
  content     String   @db.Text
  createdAt   DateTime @map("created_at")
  booking     Booking  @relation(fields: [bookingId], references: [bookingId])

  @@unique([bookingId]) 
  @@map("contracts")
}

model ComplaintList {
  complaintListId String   @id @map("complaint_list_id")
  bookingId       String   @map("booking_id")
  customerId      String   @map("customer_id")
  helperId        String   @map("helper_id")
  userType        UserType @map("user_type")
  reason          String   @db.Text
  booking         Booking  @relation(fields: [bookingId], references: [bookingId])
  customer        User     @relation("UserComplaints", fields: [customerId], references: [id])
  helper          Helper   @relation("HelperComplaints", fields: [helperId], references: [helperId])

  @@map("complaint_list")
}

model BlackList {
  blackListId String @id @map("black_list_id")
  userId      String @map("user_id")
  reason      String @db.Text
  user        User   @relation(fields: [userId], references: [id])

  @@map("black_list")
}